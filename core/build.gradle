plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'signing'
}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.5"
}

repositories {
    mavenLocal()
    maven {
        url = 'https://jcenter.bintray.com'
    }

    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

def ktor_version = "1.4.0"
def karate_version = "0.9.6"
def jgit_version = "5.8.1.202007141445-r"

def junit_version = "5.6.2"
def testcontainers_version = "1.14.3"

dependencies {
    implementation 'io.cucumber:gherkin:15.0.2'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-features:$ktor_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0'
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:$jgit_version"

    implementation "org.testcontainers:testcontainers:$testcontainers_version"
    implementation "org.testcontainers:kafka:$testcontainers_version"

    implementation 'org.apache.kafka:kafka-clients:2.6.0'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.26.0'
    testImplementation 'org.assertj:assertj-core:3.17.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation 'org.json:json:20200518'
    testImplementation "com.intuit.karate:karate-core:$karate_version"
    testImplementation "com.intuit.karate:karate-apache:$karate_version"
    testImplementation "com.intuit.karate:karate-junit5:$karate_version"
    testImplementation 'org.springframework:spring-web:5.2.8.RELEASE'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'io.mockk:mockk:1.10.0'
    testImplementation 'org.assertj:assertj-core:3.17.2'
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
}

group = 'run.qontract'

jar {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'qontract-core'
            from components.java
            pom {
                name = 'Qontract'
                description = 'A Contract Testing Tool that leverages Gherkin to describe APIs in a human readable and machine enforceable manner'
                url = 'https://qontract.run'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/qontract/qontract/blob/master/License.md'
                    }
                }
                developers {
                    developer {
                        id = 'qontractBuilders'
                        name = 'Qontract Builders'
                        email = 'info@qontract.run'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:qontract/qontract.git'
                    url = 'https://qontract.run/'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty("ossrhUsername") ? project.getProperty("ossrhUsername") : ""
                password = project.hasProperty("ossrhPassword") ? project.getProperty("ossrhPassword") : ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("signing.keyId") }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}

