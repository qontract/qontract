plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'signing'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://jcenter.bintray.com'
    }

    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

def ktor_version = "1.4.3"
def junit_version = "5.7.0"

dependencies {
    implementation project(':core')
    implementation "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    implementation 'org.jetbrains.kotlin:kotlin-maven-serialization'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1'
    implementation 'org.assertj:assertj-core:3.18.1'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'

    implementation 'org.apache.kafka:kafka-clients:2.7.0'

    implementation "io.ktor:ktor-client-core-jvm:${ktor_version}"
    implementation "io.ktor:ktor-client-cio:${ktor_version}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
}

group = 'run.qontract'

jar {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'junit5-support'
            from components.java
            pom {
                name = 'QontractJUnit5Support'
                description = 'Qontract JUnit 5 Support'
                url = 'https://qontract.run'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/qontract/qontract/blob/master/License.md'
                    }
                }
                developers {
                    developer {
                        id = 'qontractBuilders'
                        name = 'Qontract Builders'
                        email = 'info@qontract.run'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:qontract/qontract.git'
                    url = 'https://qontract.run/'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty("ossrhUsername") ? project.getProperty("ossrhUsername") : ""
                password = project.hasProperty("ossrhPassword") ? project.getProperty("ossrhPassword") : ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("signing.keyId") }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
